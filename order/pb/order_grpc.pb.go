// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaceOrderServiceClient is the client API for PlaceOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaceOrderServiceClient interface {
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error)
}

type placeOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaceOrderServiceClient(cc grpc.ClientConnInterface) PlaceOrderServiceClient {
	return &placeOrderServiceClient{cc}
}

func (c *placeOrderServiceClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error) {
	out := new(PlaceOrderResponse)
	err := c.cc.Invoke(ctx, "/order.PlaceOrderService/PlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaceOrderServiceServer is the server API for PlaceOrderService service.
// All implementations must embed UnimplementedPlaceOrderServiceServer
// for forward compatibility
type PlaceOrderServiceServer interface {
	PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error)
	mustEmbedUnimplementedPlaceOrderServiceServer()
}

// UnimplementedPlaceOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaceOrderServiceServer struct {
}

func (UnimplementedPlaceOrderServiceServer) PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedPlaceOrderServiceServer) mustEmbedUnimplementedPlaceOrderServiceServer() {}

// UnsafePlaceOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaceOrderServiceServer will
// result in compilation errors.
type UnsafePlaceOrderServiceServer interface {
	mustEmbedUnimplementedPlaceOrderServiceServer()
}

func RegisterPlaceOrderServiceServer(s grpc.ServiceRegistrar, srv PlaceOrderServiceServer) {
	s.RegisterService(&PlaceOrderService_ServiceDesc, srv)
}

func _PlaceOrderService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceOrderServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.PlaceOrderService/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceOrderServiceServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaceOrderService_ServiceDesc is the grpc.ServiceDesc for PlaceOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaceOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.PlaceOrderService",
	HandlerType: (*PlaceOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _PlaceOrderService_PlaceOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order.proto",
}

// CancelOrderServiceClient is the client API for CancelOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CancelOrderServiceClient interface {
	PlaceOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
}

type cancelOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCancelOrderServiceClient(cc grpc.ClientConnInterface) CancelOrderServiceClient {
	return &cancelOrderServiceClient{cc}
}

func (c *cancelOrderServiceClient) PlaceOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/order.CancelOrderService/PlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CancelOrderServiceServer is the server API for CancelOrderService service.
// All implementations must embed UnimplementedCancelOrderServiceServer
// for forward compatibility
type CancelOrderServiceServer interface {
	PlaceOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	mustEmbedUnimplementedCancelOrderServiceServer()
}

// UnimplementedCancelOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCancelOrderServiceServer struct {
}

func (UnimplementedCancelOrderServiceServer) PlaceOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedCancelOrderServiceServer) mustEmbedUnimplementedCancelOrderServiceServer() {}

// UnsafeCancelOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CancelOrderServiceServer will
// result in compilation errors.
type UnsafeCancelOrderServiceServer interface {
	mustEmbedUnimplementedCancelOrderServiceServer()
}

func RegisterCancelOrderServiceServer(s grpc.ServiceRegistrar, srv CancelOrderServiceServer) {
	s.RegisterService(&CancelOrderService_ServiceDesc, srv)
}

func _CancelOrderService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CancelOrderServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.CancelOrderService/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CancelOrderServiceServer).PlaceOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CancelOrderService_ServiceDesc is the grpc.ServiceDesc for CancelOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CancelOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.CancelOrderService",
	HandlerType: (*CancelOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _CancelOrderService_PlaceOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order.proto",
}
